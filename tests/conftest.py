"""Initialise a text database and profile for pytest.

Originally this was copied from aiida-quantumespresso.

"""
import os
import shutil
from collections.abc import Mapping

import numpy as np
import pytest
from aiida.orm import SinglefileData

pytest_plugins = ["aiida.manage.tests.pytest_fixtures"]


@pytest.fixture(scope="session")
def filepath_tests():
    """Return the absolute filepath of the `tests` folder."""
    return os.path.dirname(os.path.abspath(__file__))


@pytest.fixture(scope="function")
def fixture_sandbox():
    """Return a `SandboxFolder`."""
    from aiida.common.folders import SandboxFolder

    with SandboxFolder() as folder:
        yield folder


@pytest.fixture
def fixture_localhost(aiida_localhost):
    """Return a localhost `Computer`."""
    localhost = aiida_localhost
    localhost.set_default_mpiprocs_per_machine(1)
    return localhost


@pytest.fixture
def fixture_code(fixture_localhost):
    """Return a `Code` instance.

    This is configured to run calculations of given entry point on localhost
    `Computer`.

    """

    def _fixture_code(entry_point_name):
        from aiida.common import exceptions
        from aiida.orm import Code

        label = f"test.{entry_point_name}"

        try:
            return Code.objects.get(label=label)
        except exceptions.NotExistent:
            return Code(
                label=label,
                input_plugin_name=entry_point_name,
                remote_computer_exec=[fixture_localhost, "/bin/true"],
            )

    return _fixture_code


@pytest.fixture(scope="session")
def generate_structure():
    """Return a `StructureData` of conventional unit cell of NaCl."""

    def _generate_structure(structure_id="NaCl"):
        from aiida.orm import StructureData

        if structure_id == "NaCl":
            a = 5.6903014761756712
            structure = StructureData(
                cell=[
                    [a, 0.0, 0.0],
                    [0.0, a, 0.0],
                    [0.0, 0.0, a],
                ]
            )
            lattice = structure.cell
            pos_Na = [[0, 0, 0], [0, 0.5, 0.5], [0.5, 0, 0.5], [0.5, 0.5, 0]]
            for pos in pos_Na:
                structure.append_atom(
                    position=np.dot(pos, lattice), symbols="Na", name="Na"
                )
            pos_Cl = [[0.5, 0.5, 0.5], [0.5, 0, 0], [0, 0.5, 0], [0, 0, 0.5]]
            for pos in pos_Cl:
                structure.append_atom(
                    position=np.dot(pos, lattice), symbols="Cl", name="Cl"
                )
        else:
            raise KeyError(f'Unknown structure_id="{structure_id}"')
        return structure

    return _generate_structure


@pytest.fixture(scope="session")
def generate_displacements():
    """Return a `ArrayData` of displacements of NaCl."""

    def _generate_displacements(structure_id="NaCl"):
        from aiida.orm import ArrayData

        if structure_id == "NaCl":
            displacements = ArrayData()
            displacements.set_array(
                "displacements",
                np.array(
                    [
                        [
                            [-0.02273746, -0.01931934, -0.00312583],
                            [-0.0228422, 0.0193765, 0.00166885],
                            [0.0224281, 0.01592108, 0.01197912],
                            [-0.00064646, 0.00217048, -0.0299144],
                            [0.01862151, -0.01785433, -0.01531217],
                            [0.00067696, 0.00025026, 0.02999132],
                            [-0.01435842, -0.02476933, 0.00896193],
                            [0.00253315, -0.00924756, 0.0284265],
                        ],
                        [
                            [-0.01740268, -0.02413313, 0.00383909],
                            [0.0170104, -0.00024372, -0.02471006],
                            [0.01743549, -0.01667561, -0.01783052],
                            [-0.0135311, 0.02481529, 0.01005539],
                            [0.01114619, -0.00962554, -0.0261364],
                            [0.0214863, 0.02083848, 0.00202403],
                            [-0.0225386, -0.01897413, 0.0056563],
                            [-0.02252869, -0.01415487, 0.01385993],
                        ],
                        [
                            [-0.01523419, 0.0214319, -0.01444275],
                            [-0.00511404, -0.02951603, -0.00162813],
                            [0.01960127, 0.01683884, 0.01523954],
                            [0.01784544, -0.00675864, -0.02314867],
                            [-0.00760845, -0.01536795, 0.0246158],
                            [-0.01329461, -0.02031615, 0.01762123],
                            [0.01470665, 0.01854289, 0.01843571],
                            [-0.02344855, 0.00723628, -0.01725693],
                        ],
                        [
                            [0.00796995, -0.02797597, 0.00733656],
                            [-0.01105009, -0.00621813, -0.02718879],
                            [-0.00927974, -0.01958591, 0.02074316],
                            [-0.01964515, 0.01527182, -0.01675827],
                            [-0.01851097, 0.0215803, 0.00957259],
                            [0.02018503, 0.00962468, -0.01999826],
                            [-0.0153828, 0.01394675, -0.02165312],
                            [0.02233025, -0.01916396, -0.00583974],
                        ],
                    ]
                ),
            )
        else:
            raise KeyError(f'Unknown structure_id="{structure_id}"')
        return displacements

    return _generate_displacements


@pytest.fixture(scope="session")
def generate_displacement_dataset():
    """Return a `Dict` of displacement dataset of NaCl."""

    def _generate_displacement_dataset(structure_id="NaCl"):
        from aiida.orm import Dict

        if structure_id == "NaCl":
            dataset = Dict(
                dict={
                    "natom": 8,
                    "first_atoms": [
                        {"number": 0, "displacement": [0.03, 0.0, 0.0]},
                        {"number": 4, "displacement": [0.03, 0.0, 0.0]},
                    ],
                }
            )
        elif structure_id == "NaCl-64":
            dataset = Dict(
                dict={
                    "natom": 64,
                    "first_atoms": [
                        {"number": 0, "displacement": [0.03, 0.0, 0.0]},
                        {"number": 32, "displacement": [0.03, 0.0, 0.0]},
                    ],
                }
            )
        elif structure_id == "NaCl-fc3":
            dataset = Dict(
                dict={
                    "natom": 8,
                    "first_atoms": [
                        {
                            "number": 0,
                            "displacement": [0.03, 0.0, 0.0],
                            "second_atoms": [
                                {
                                    "number": 0,
                                    "displacement": [
                                        0.021213203435596,
                                        0.021213203435596,
                                        0.0,
                                    ],
                                },
                                {
                                    "number": 0,
                                    "displacement": [
                                        -0.021213203435596,
                                        -0.021213203435596,
                                        0.0,
                                    ],
                                },
                                {
                                    "number": 1,
                                    "displacement": [
                                        0.021213203435596,
                                        0.021213203435596,
                                        0.0,
                                    ],
                                },
                                {
                                    "number": 1,
                                    "displacement": [
                                        -0.021213203435596,
                                        -0.021213203435596,
                                        0.0,
                                    ],
                                },
                                {
                                    "number": 2,
                                    "displacement": [
                                        0.017320508075689,
                                        0.017320508075689,
                                        0.017320508075689,
                                    ],
                                },
                                {
                                    "number": 2,
                                    "displacement": [
                                        -0.017320508075689,
                                        -0.017320508075689,
                                        -0.017320508075689,
                                    ],
                                },
                                {
                                    "number": 4,
                                    "displacement": [
                                        0.021213203435596,
                                        0.021213203435596,
                                        0.0,
                                    ],
                                },
                                {
                                    "number": 4,
                                    "displacement": [
                                        -0.021213203435596,
                                        -0.021213203435596,
                                        0.0,
                                    ],
                                },
                                {
                                    "number": 5,
                                    "displacement": [
                                        0.021213203435596,
                                        0.021213203435596,
                                        0.0,
                                    ],
                                },
                                {
                                    "number": 5,
                                    "displacement": [
                                        -0.021213203435596,
                                        -0.021213203435596,
                                        0.0,
                                    ],
                                },
                                {
                                    "number": 6,
                                    "displacement": [
                                        0.017320508075689,
                                        0.017320508075689,
                                        0.017320508075689,
                                    ],
                                },
                                {
                                    "number": 6,
                                    "displacement": [
                                        -0.017320508075689,
                                        -0.017320508075689,
                                        -0.017320508075689,
                                    ],
                                },
                            ],
                        },
                        {
                            "number": 4,
                            "displacement": [0.03, 0.0, 0.0],
                            "second_atoms": [
                                {
                                    "number": 0,
                                    "displacement": [
                                        0.021213203435596,
                                        0.021213203435596,
                                        0.0,
                                    ],
                                },
                                {
                                    "number": 0,
                                    "displacement": [
                                        -0.021213203435596,
                                        -0.021213203435596,
                                        0.0,
                                    ],
                                },
                                {
                                    "number": 1,
                                    "displacement": [
                                        0.021213203435596,
                                        0.021213203435596,
                                        0.0,
                                    ],
                                },
                                {
                                    "number": 1,
                                    "displacement": [
                                        -0.021213203435596,
                                        -0.021213203435596,
                                        0.0,
                                    ],
                                },
                                {
                                    "number": 2,
                                    "displacement": [
                                        0.017320508075689,
                                        0.017320508075689,
                                        0.017320508075689,
                                    ],
                                },
                                {
                                    "number": 2,
                                    "displacement": [
                                        -0.017320508075689,
                                        -0.017320508075689,
                                        -0.017320508075689,
                                    ],
                                },
                                {
                                    "number": 4,
                                    "displacement": [
                                        0.021213203435596,
                                        0.021213203435596,
                                        0.0,
                                    ],
                                },
                                {
                                    "number": 4,
                                    "displacement": [
                                        -0.021213203435596,
                                        -0.021213203435596,
                                        0.0,
                                    ],
                                },
                                {
                                    "number": 5,
                                    "displacement": [
                                        0.021213203435596,
                                        0.021213203435596,
                                        0.0,
                                    ],
                                },
                                {
                                    "number": 5,
                                    "displacement": [
                                        -0.021213203435596,
                                        -0.021213203435596,
                                        0.0,
                                    ],
                                },
                                {
                                    "number": 6,
                                    "displacement": [
                                        0.017320508075689,
                                        0.017320508075689,
                                        0.017320508075689,
                                    ],
                                },
                                {
                                    "number": 6,
                                    "displacement": [
                                        -0.017320508075689,
                                        -0.017320508075689,
                                        -0.017320508075689,
                                    ],
                                },
                            ],
                        },
                    ],
                }
            )
        else:
            raise KeyError(f'Unknown structure_id="{structure_id}"')
        return dataset

    return _generate_displacement_dataset


@pytest.fixture(scope="session")
def generate_force_sets():
    """Return a `ArrayData` of force sets of NaCl."""

    def _generate_force_sets(structure_id="NaCl"):
        from aiida.orm import ArrayData

        if structure_id == "NaCl":
            force_sets = ArrayData()
            force_sets.set_array(
                "force_sets",
                np.array(
                    [
                        [
                            [-0.04527346, 0.0, 0.0],
                            [-0.00208978, 0.0, 0.0],
                            [0.00575753, 0.0, 0.0],
                            [0.00575753, 0.0, 0.0],
                            [-0.00179103, 0.0, 0.0],
                            [0.02865135, 0.0, 0.0],
                            [0.00449393, 0.0, 0.0],
                            [0.00449393, 0.0, 0.0],
                        ],
                        [
                            [-0.00159392, 0.0, 0.0],
                            [0.0288482, 0.0, 0.0],
                            [0.00468471, 0.0, 0.0],
                            [0.00468471, 0.0, 0.0],
                            [-0.0661841, 0.0, 0.0],
                            [-0.00333842, 0.0, 0.0],
                            [0.01644941, 0.0, 0.0],
                            [0.01644941, 0.0, 0.0],
                        ],
                    ]
                ),
            )
        elif structure_id == "NaCl-displacements":
            force_sets = ArrayData()
            force_sets.set_array(
                "force_sets",
                np.array(
                    [
                        [
                            [0.0372046, 0.00683762, 0.04328315],
                            [0.05577558, -0.0447563, -0.00060254],
                            [-0.0354772, -0.03504103, 0.00656763],
                            [-0.02014451, -0.01120216, 0.03760752],
                            [-0.06493306, 0.05667851, 0.02561049],
                            [-0.02701604, -0.02268542, -0.05351923],
                            [0.03333123, 0.03537694, -0.02011715],
                            [0.02125939, 0.01479183, -0.03882988],
                        ],
                        [
                            [0.03798966, 0.02499122, 0.00160333],
                            [-0.02015968, -0.02819268, 0.04410857],
                            [-0.04004788, 0.02353561, 0.03009268],
                            [0.00286866, -0.02823368, -0.04752076],
                            [-0.0339551, 0.01639552, 0.06342865],
                            [-0.09051561, -0.04241431, -0.02517307],
                            [0.05613445, 0.02843392, -0.03983418],
                            [0.08768549, 0.0054844, -0.02670521],
                        ],
                        [
                            [0.01579788, -0.02323645, 0.01300763],
                            [0.00769028, 0.06078973, 0.01203152],
                            [-0.06076039, -0.05093182, -0.01198282],
                            [-0.01915633, -0.00037008, 0.06857963],
                            [0.01495993, 0.03397984, -0.05208676],
                            [0.01675177, 0.04663717, -0.02782852],
                            [-0.02865451, -0.03255433, -0.04654033],
                            [0.05337138, -0.03431405, 0.04481964],
                        ],
                        [
                            [0.0053879, 0.05618248, -0.02316455],
                            [-0.00772245, -0.01453432, 0.01825674],
                            [0.03679958, 0.05113131, -0.04797775],
                            [0.01337501, -0.01495624, 0.02563117],
                            [0.0273215, -0.07028789, -0.06077977],
                            [-0.03444014, 0.00828853, 0.06870305],
                            [0.01396094, -0.06270262, 0.02340082],
                            [-0.05468234, 0.04687875, -0.00406971],
                        ],
                    ]
                ),
            )
        elif structure_id == "NaCl-fc3":
            force_sets = ArrayData()
            force_sets.set_array(
                "force_sets",
                np.array(
                    [
                        [
                            [-4.5273460e-02, -0.0000000e00, -0.0000000e00],
                            [-2.0897800e-03, -0.0000000e00, 0.0000000e00],
                            [5.7575300e-03, -0.0000000e00, 0.0000000e00],
                            [5.7575300e-03, 0.0000000e00, 0.0000000e00],
                            [-1.7910300e-03, 0.0000000e00, 0.0000000e00],
                            [2.8651350e-02, -0.0000000e00, 0.0000000e00],
                            [4.4939300e-03, -0.0000000e00, 0.0000000e00],
                            [4.4939300e-03, -0.0000000e00, 0.0000000e00],
                        ],
                        [
                            [-1.5939200e-03, -0.0000000e00, 0.0000000e00],
                            [2.8848200e-02, -0.0000000e00, 0.0000000e00],
                            [4.6847100e-03, -0.0000000e00, 0.0000000e00],
                            [4.6847100e-03, -0.0000000e00, 0.0000000e00],
                            [-6.6184100e-02, 0.0000000e00, -0.0000000e00],
                            [-3.3384200e-03, -0.0000000e00, 0.0000000e00],
                            [1.6449410e-02, -0.0000000e00, 0.0000000e00],
                            [1.6449410e-02, -0.0000000e00, 0.0000000e00],
                        ],
                        [
                            [-8.0606710e-02, -3.1005710e-02, 0.0000000e00],
                            [-3.1752200e-03, 3.9533300e-03, 0.0000000e00],
                            [1.0223250e-02, -1.5967400e-03, 0.0000000e00],
                            [1.0230700e-02, 3.9716000e-03, 0.0000000e00],
                            [-2.6575900e-03, -1.3815800e-03, 0.0000000e00],
                            [4.9886690e-02, 2.9733700e-03, 0.0000000e00],
                            [8.0339100e-03, 2.0025750e-02, 0.0000000e00],
                            [8.0649500e-03, 3.0599900e-03, 0.0000000e00],
                        ],
                        [
                            [-1.2767550e-02, 3.1483030e-02, 0.0000000e00],
                            [-6.7454000e-04, -4.0037400e-03, 0.0000000e00],
                            [1.6242300e-03, 1.5461900e-03, 0.0000000e00],
                            [1.6252400e-03, -4.0043200e-03, 0.0000000e00],
                            [-5.8720000e-04, 1.3260300e-03, 0.0000000e00],
                            [8.2810200e-03, -3.1033500e-03, 0.0000000e00],
                            [1.2441700e-03, -2.0146320e-02, 0.0000000e00],
                            [1.2546300e-03, -3.0975300e-03, 0.0000000e00],
                        ],
                        [
                            [-4.6861160e-02, 3.9781200e-03, 0.0000000e00],
                            [-3.3367100e-02, -3.1277280e-02, 0.0000000e00],
                            [9.7308900e-03, 3.9788400e-03, 0.0000000e00],
                            [9.7271500e-03, -1.5797500e-03, 0.0000000e00],
                            [1.8302870e-02, 3.0587000e-03, 0.0000000e00],
                            [2.7344000e-02, -1.3424000e-03, 0.0000000e00],
                            [7.5722800e-03, 3.0655100e-03, 0.0000000e00],
                            [7.5510700e-03, 2.0118260e-02, 0.0000000e00],
                        ],
                        [
                            [-4.3707190e-02, -3.9723100e-03, 0.0000000e00],
                            [2.9178990e-02, 3.1265890e-02, 0.0000000e00],
                            [1.7760500e-03, -3.9789100e-03, 0.0000000e00],
                            [1.7791400e-03, 1.5735000e-03, 0.0000000e00],
                            [-2.1915710e-02, -3.0706600e-03, 0.0000000e00],
                            [3.0053320e-02, 1.3689700e-03, 0.0000000e00],
                            [1.4134400e-03, -3.0812400e-03, 0.0000000e00],
                            [1.4219500e-03, -2.0105240e-02, 0.0000000e00],
                        ],
                        [
                            [-4.2057150e-02, -1.3133000e-03, 3.2178700e-03],
                            [1.1266400e-03, 3.2194200e-03, -1.3096700e-03],
                            [-1.9559520e-02, -2.5319380e-02, -2.5331200e-02],
                            [4.4419000e-03, 3.2193900e-03, 3.2233900e-03],
                            [6.8816000e-04, 1.6375410e-02, 2.4799200e-03],
                            [3.1152550e-02, 2.4752800e-03, 1.6374830e-02],
                            [3.3539800e-03, -1.1381800e-03, -1.1377200e-03],
                            [2.0853450e-02, 2.4813500e-03, 2.4825700e-03],
                        ],
                        [
                            [-4.8497470e-02, 1.3151000e-03, -3.2354600e-03],
                            [-5.3125200e-03, -3.2199700e-03, 1.3110200e-03],
                            [3.1074120e-02, 2.5315870e-02, 2.5341920e-02],
                            [7.0683500e-03, -3.2198900e-03, -3.2218500e-03],
                            [-4.2694700e-03, -1.6367650e-02, -2.4816300e-03],
                            [2.6187690e-02, -2.4804200e-03, -1.6367150e-02],
                            [5.6283600e-03, 1.1377400e-03, 1.1357800e-03],
                            [-1.1879060e-02, -2.4807700e-03, -2.4826300e-03],
                        ],
                        [
                            [-4.6388740e-02, -1.1102100e-03, 0.0000000e00],
                            [1.8253970e-02, 3.3112400e-03, 0.0000000e00],
                            [9.0669300e-03, 2.0346450e-02, 0.0000000e00],
                            [9.0837700e-03, 3.3283900e-03, 0.0000000e00],
                            [-4.8630410e-02, -4.6833950e-02, 0.0000000e00],
                            [2.6331230e-02, 1.1649730e-02, 0.0000000e00],
                            [1.6138160e-02, -2.3498300e-03, 0.0000000e00],
                            [1.6145090e-02, 1.1658180e-02, 0.0000000e00],
                        ],
                        [
                            [-4.4169610e-02, 1.1121400e-03, 0.0000000e00],
                            [-2.2440380e-02, -3.3125900e-03, 0.0000000e00],
                            [2.4433400e-03, -2.0346900e-02, 0.0000000e00],
                            [2.4265000e-03, -3.3292900e-03, 0.0000000e00],
                            [4.5032990e-02, 4.6829600e-02, 0.0000000e00],
                            [3.1032770e-02, -1.1642250e-02, 0.0000000e00],
                            [-7.1543200e-03, 2.3422000e-03, 0.0000000e00],
                            [-7.1712900e-03, -1.1652920e-02, 0.0000000e00],
                        ],
                        [
                            [-2.4742920e-02, 3.3160300e-03, 0.0000000e00],
                            [-3.2234800e-03, -1.1099100e-03, 0.0000000e00],
                            [9.0638400e-03, 3.3297800e-03, 0.0000000e00],
                            [9.0463600e-03, 2.0345880e-02, 0.0000000e00],
                            [-4.1679400e-03, 1.1644210e-02, 0.0000000e00],
                            [-1.8216920e-02, -4.6831230e-02, 0.0000000e00],
                            [1.6123520e-02, 1.1651000e-02, 0.0000000e00],
                            [1.6117540e-02, -2.3457800e-03, 0.0000000e00],
                        ],
                        [
                            [-6.6162370e-02, -3.2505700e-03, 0.0000000e00],
                            [-9.7751000e-04, 1.1095500e-03, 0.0000000e00],
                            [2.4348100e-03, -3.3284400e-03, 0.0000000e00],
                            [2.4508400e-03, -2.0346120e-02, 0.0000000e00],
                            [5.5750000e-04, -1.1648190e-02, 0.0000000e00],
                            [7.5995200e-02, 4.6770050e-02, 0.0000000e00],
                            [-7.1518700e-03, -1.1661340e-02, 0.0000000e00],
                            [-7.1466000e-03, 2.3550700e-03, 0.0000000e00],
                        ],
                        [
                            [-4.2552030e-02, 1.6600340e-02, 2.7077900e-03],
                            [6.1787000e-04, 2.7105900e-03, 1.6597960e-02],
                            [4.8522700e-03, -9.0595000e-04, -9.0706000e-04],
                            [2.2352220e-02, 2.7124400e-03, 2.7154300e-03],
                            [7.7209100e-03, -1.9141500e-03, 9.5087000e-03],
                            [3.8191130e-02, 9.5145500e-03, -1.9073700e-03],
                            [-3.3749980e-02, -3.8231380e-02, -3.8226930e-02],
                            [2.5676100e-03, 9.5135700e-03, 9.5114600e-03],
                        ],
                        [
                            [-4.7975760e-02, -1.6554490e-02, -2.7156800e-03],
                            [-4.8035100e-03, -2.7069700e-03, -1.6594940e-02],
                            [6.6602400e-03, 9.0729000e-04, 9.0554000e-04],
                            [-1.0838690e-02, -2.7079200e-03, -2.7105500e-03],
                            [-1.1304090e-02, 1.9191900e-03, -9.5127300e-03],
                            [1.9156610e-02, -9.5100600e-03, 1.9181900e-03],
                            [4.2699480e-02, 3.8165140e-02, 3.8224540e-02],
                            [6.4057200e-03, -9.5121800e-03, -9.5143800e-03],
                        ],
                        [
                            [-3.2869110e-02, -3.1271700e-02, 0.0000000e00],
                            [2.7270460e-02, 3.9743100e-03, 0.0000000e00],
                            [8.6582700e-03, -1.5757300e-03, 0.0000000e00],
                            [8.6592100e-03, 3.9775200e-03, 0.0000000e00],
                            [-6.7546790e-02, -1.3592100e-03, 0.0000000e00],
                            [1.6787480e-02, 3.0667400e-03, 0.0000000e00],
                            [1.9513290e-02, 2.0109230e-02, 0.0000000e00],
                            [1.9527190e-02, 3.0788500e-03, 0.0000000e00],
                        ],
                        [
                            [2.9676780e-02, 3.1275370e-02, 0.0000000e00],
                            [3.0423650e-02, -3.9755200e-03, 0.0000000e00],
                            [7.1057000e-04, 1.5805800e-03, 0.0000000e00],
                            [7.0376000e-04, -3.9811100e-03, 0.0000000e00],
                            [-6.4814060e-02, 1.3478900e-03, 0.0000000e00],
                            [-2.3447080e-02, -3.0402600e-03, 0.0000000e00],
                            [1.3385970e-02, -2.0131770e-02, 0.0000000e00],
                            [1.3360410e-02, -3.0751800e-03, 0.0000000e00],
                        ],
                        [
                            [-3.1880800e-03, 3.9746900e-03, 0.0000000e00],
                            [-2.4627600e-03, -3.1269490e-02, 0.0000000e00],
                            [8.6449700e-03, 3.9790900e-03, 0.0000000e00],
                            [8.6397000e-03, -1.5751700e-03, 0.0000000e00],
                            [-4.5912620e-02, 3.0637900e-03, 0.0000000e00],
                            [-4.7267600e-03, -1.3605400e-03, 0.0000000e00],
                            [1.9510280e-02, 3.0801700e-03, 0.0000000e00],
                            [1.9495280e-02, 2.0107450e-02, 0.0000000e00],
                        ],
                        [
                            [-1.7570000e-05, -3.9749000e-03, 0.0000000e00],
                            [6.0626200e-02, 3.1205290e-02, 0.0000000e00],
                            [7.0624000e-04, -3.9758300e-03, 0.0000000e00],
                            [7.0683000e-04, 1.5740800e-03, 0.0000000e00],
                            [-8.6784840e-02, -3.0028600e-03, 0.0000000e00],
                            [-1.9841400e-03, 1.3616900e-03, 0.0000000e00],
                            [1.3367520e-02, -3.0793000e-03, 0.0000000e00],
                            [1.3379750e-02, -2.0108180e-02, 0.0000000e00],
                        ],
                        [
                            [1.6254200e-03, -1.3121500e-03, 3.2219000e-03],
                            [3.2066390e-02, 3.2198700e-03, -1.3107400e-03],
                            [-2.0647350e-02, -2.5321840e-02, -2.5335110e-02],
                            [3.3697500e-03, 3.2210700e-03, 3.2220600e-03],
                            [-6.3670320e-02, 1.6370060e-02, 2.4855500e-03],
                            [-8.6804000e-04, 2.4802600e-03, 1.6370050e-02],
                            [1.5310580e-02, -1.1367800e-03, -1.1352700e-03],
                            [3.2813560e-02, 2.4795200e-03, 2.4815500e-03],
                        ],
                        [
                            [-4.8155400e-03, 1.3148200e-03, -3.2226300e-03],
                            [2.5622980e-02, -3.2183800e-03, 1.3101800e-03],
                            [2.9991680e-02, 2.5265120e-02, 2.5335710e-02],
                            [5.9960000e-03, -3.2189600e-03, -3.2236000e-03],
                            [-6.8634560e-02, -1.6325930e-02, -2.4805300e-03],
                            [-5.8262900e-03, -2.4777300e-03, -1.6370910e-02],
                            [1.7587490e-02, 1.1393700e-03, 1.1346200e-03],
                            [7.8250000e-05, -2.4783100e-03, -2.4828500e-03],
                        ],
                        [
                            [-2.8575200e-03, -1.1235700e-03, 0.0000000e00],
                            [4.9606490e-02, 3.2147200e-03, 0.0000000e00],
                            [7.8213300e-03, 2.0278450e-02, 0.0000000e00],
                            [7.8610900e-03, 3.3171100e-03, 0.0000000e00],
                            [-1.1248738e-01, -4.6619340e-02, 0.0000000e00],
                            [-5.8499700e-03, 1.1625880e-02, 0.0000000e00],
                            [2.7943540e-02, -2.3667000e-03, 0.0000000e00],
                            [2.7962430e-02, 1.1673450e-02, 0.0000000e00],
                        ],
                        [
                            [-4.4007000e-04, 1.0931800e-03, 0.0000000e00],
                            [8.4281200e-03, -3.3441800e-03, 0.0000000e00],
                            [1.3914500e-03, -2.0372910e-02, 0.0000000e00],
                            [1.3986300e-03, -3.3454800e-03, 0.0000000e00],
                            [-1.9513100e-02, 4.6968540e-02, 0.0000000e00],
                            [-9.5422000e-04, -1.1664390e-02, 0.0000000e00],
                            [4.8423600e-03, 2.3347900e-03, 0.0000000e00],
                            [4.8468300e-03, -1.1669560e-02, 0.0000000e00],
                        ],
                        [
                            [1.8752110e-02, 3.3117300e-03, 0.0000000e00],
                            [2.7735840e-02, -1.1099600e-03, 0.0000000e00],
                            [8.0145000e-03, 3.3289800e-03, 0.0000000e00],
                            [7.9954700e-03, 2.0346300e-02, 0.0000000e00],
                            [-6.8519640e-02, 1.1646050e-02, 0.0000000e00],
                            [-5.0178090e-02, -4.6827480e-02, 0.0000000e00],
                            [2.8103530e-02, 1.1654660e-02, 0.0000000e00],
                            [2.8096280e-02, -2.3502800e-03, 0.0000000e00],
                        ],
                        [
                            [-2.1941850e-02, -3.3119200e-03, 0.0000000e00],
                            [2.9957280e-02, 1.1101300e-03, 0.0000000e00],
                            [1.3565900e-03, -3.3304400e-03, 0.0000000e00],
                            [1.3711800e-03, -2.0345580e-02, 0.0000000e00],
                            [-6.3821350e-02, -1.1640820e-02, 0.0000000e00],
                            [4.3482870e-02, 4.6823570e-02, 0.0000000e00],
                            [4.7929500e-03, -1.1655430e-02, 0.0000000e00],
                            [4.8023300e-03, 2.3504900e-03, 0.0000000e00],
                        ],
                        [
                            [1.1151200e-03, 1.6596090e-02, 2.7091000e-03],
                            [3.1556420e-02, 2.7102500e-03, 1.6592880e-02],
                            [3.7790700e-03, -9.0523000e-04, -9.0708000e-04],
                            [2.1278940e-02, 2.7115200e-03, 2.7103300e-03],
                            [-5.6637190e-02, -1.9176100e-03, 9.5134000e-03],
                            [6.1670200e-03, 9.5096200e-03, -1.9202500e-03],
                            [-2.1775690e-02, -3.8211170e-02, -3.8209350e-02],
                            [1.4516310e-02, 9.5065300e-03, 9.5109700e-03],
                        ],
                        [
                            [-4.3023100e-03, -1.6596480e-02, -2.7102200e-03],
                            [2.6138890e-02, -2.7101900e-03, -1.6598520e-02],
                            [5.5894800e-03, 9.0579000e-04, 9.0386000e-04],
                            [-1.1914730e-02, -2.7111000e-03, -2.7082200e-03],
                            [-7.5692950e-02, 1.9156400e-03, -9.5329000e-03],
                            [-1.2858680e-02, -9.5091900e-03, 1.9149800e-03],
                            [5.4681200e-02, 3.8216750e-02, 3.8241310e-02],
                            [1.8359110e-02, -9.5112300e-03, -9.5102900e-03],
                        ],
                    ]
                ),
            )
        elif structure_id == "NaCl-64":
            force_sets = ArrayData()
            force_sets.set_array(
                "force_sets",
                np.array(
                    [
                        [
                            [-5.557933e-02, 0.000000e00, 0.000000e00],
                            [8.958000e-03, 0.000000e00, 0.000000e00],
                            [-1.115300e-04, 0.000000e00, 0.000000e00],
                            [3.453500e-04, 0.000000e00, 0.000000e00],
                            [-1.115300e-04, 0.000000e00, 0.000000e00],
                            [3.453500e-04, 0.000000e00, 0.000000e00],
                            [-4.459500e-04, 0.000000e00, 0.000000e00],
                            [4.383700e-04, 0.000000e00, 0.000000e00],
                            [-1.681890e-03, -1.924000e-05, -1.924000e-05],
                            [1.180280e-03, 4.930000e-06, 4.930000e-06],
                            [-1.681890e-03, 1.924000e-05, -1.924000e-05],
                            [1.180280e-03, -4.930000e-06, 4.930000e-06],
                            [-1.681890e-03, -1.924000e-05, 1.924000e-05],
                            [1.180280e-03, 4.930000e-06, -4.930000e-06],
                            [-1.681890e-03, 1.924000e-05, 1.924000e-05],
                            [1.180280e-03, -4.930000e-06, -4.930000e-06],
                            [1.481770e-03, 0.000000e00, 5.852820e-03],
                            [1.481290e-03, 0.000000e00, -5.730200e-03],
                            [-2.609000e-05, 0.000000e00, -5.961000e-05],
                            [-1.338000e-05, 0.000000e00, 5.580000e-05],
                            [1.481770e-03, 0.000000e00, -5.852820e-03],
                            [1.481290e-03, 0.000000e00, 5.730200e-03],
                            [-2.609000e-05, 0.000000e00, 5.961000e-05],
                            [-1.338000e-05, 0.000000e00, -5.580000e-05],
                            [1.481770e-03, 5.852820e-03, 0.000000e00],
                            [1.481290e-03, -5.730200e-03, 0.000000e00],
                            [1.481770e-03, -5.852820e-03, 0.000000e00],
                            [1.481290e-03, 5.730200e-03, 0.000000e00],
                            [-2.609000e-05, -5.961000e-05, 0.000000e00],
                            [-1.338000e-05, 5.580000e-05, 0.000000e00],
                            [-2.609000e-05, 5.961000e-05, 0.000000e00],
                            [-1.338000e-05, -5.580000e-05, 0.000000e00],
                            [-1.994300e-04, -1.297690e-03, -1.297690e-03],
                            [-2.213900e-04, 1.271880e-03, 1.271880e-03],
                            [-1.994300e-04, 1.297690e-03, -1.297690e-03],
                            [-2.213900e-04, -1.271880e-03, 1.271880e-03],
                            [-1.994300e-04, -1.297690e-03, 1.297690e-03],
                            [-2.213900e-04, 1.271880e-03, -1.271880e-03],
                            [-1.994300e-04, 1.297690e-03, 1.297690e-03],
                            [-2.213900e-04, -1.271880e-03, -1.271880e-03],
                            [1.603040e-02, 0.000000e00, 0.000000e00],
                            [1.241778e-02, 0.000000e00, 0.000000e00],
                            [1.641000e-04, 0.000000e00, 0.000000e00],
                            [1.375700e-04, 0.000000e00, 0.000000e00],
                            [1.641000e-04, 0.000000e00, 0.000000e00],
                            [1.375700e-04, 0.000000e00, 0.000000e00],
                            [3.820000e-06, 0.000000e00, 0.000000e00],
                            [-4.940000e-06, 0.000000e00, 0.000000e00],
                            [5.190570e-03, -1.055600e-04, 0.000000e00],
                            [-2.855060e-03, -1.763000e-05, 0.000000e00],
                            [5.190570e-03, 1.055600e-04, 0.000000e00],
                            [-2.855060e-03, 1.763000e-05, 0.000000e00],
                            [6.130900e-04, 8.810000e-06, 0.000000e00],
                            [-6.720500e-04, 4.400000e-07, 0.000000e00],
                            [6.130900e-04, -8.810000e-06, 0.000000e00],
                            [-6.720500e-04, -4.400000e-07, 0.000000e00],
                            [5.190570e-03, 0.000000e00, -1.055600e-04],
                            [-2.855060e-03, 0.000000e00, -1.763000e-05],
                            [6.130900e-04, 0.000000e00, 8.810000e-06],
                            [-6.720500e-04, 0.000000e00, 4.400000e-07],
                            [5.190570e-03, 0.000000e00, 1.055600e-04],
                            [-2.855060e-03, 0.000000e00, 1.763000e-05],
                            [6.130900e-04, 0.000000e00, -8.810000e-06],
                            [-6.720500e-04, 0.000000e00, -4.400000e-07],
                        ],
                        [
                            [-2.295800e-04, -1.279010e-03, -1.279010e-03],
                            [-2.073800e-04, 1.287540e-03, 1.287540e-03],
                            [-2.295800e-04, 1.279010e-03, -1.279010e-03],
                            [-2.073800e-04, -1.287540e-03, 1.287540e-03],
                            [-2.295800e-04, -1.279010e-03, 1.279010e-03],
                            [-2.073800e-04, 1.287540e-03, -1.287540e-03],
                            [-2.295800e-04, 1.279010e-03, 1.279010e-03],
                            [-2.073800e-04, -1.287540e-03, -1.287540e-03],
                            [1.247740e-02, 0.000000e00, 0.000000e00],
                            [1.612700e-02, 0.000000e00, 0.000000e00],
                            [1.374700e-04, 0.000000e00, 0.000000e00],
                            [1.530400e-04, 0.000000e00, 0.000000e00],
                            [1.374700e-04, 0.000000e00, 0.000000e00],
                            [1.530400e-04, 0.000000e00, 0.000000e00],
                            [-1.215000e-05, 0.000000e00, 0.000000e00],
                            [-2.720000e-06, 0.000000e00, 0.000000e00],
                            [5.190040e-03, 6.740000e-05, 0.000000e00],
                            [-2.863910e-03, 3.750000e-06, 0.000000e00],
                            [5.190040e-03, -6.740000e-05, 0.000000e00],
                            [-2.863910e-03, -3.750000e-06, 0.000000e00],
                            [6.131800e-04, 1.810000e-06, 0.000000e00],
                            [-6.847200e-04, 2.830000e-06, 0.000000e00],
                            [6.131800e-04, -1.810000e-06, 0.000000e00],
                            [-6.847200e-04, -2.830000e-06, 0.000000e00],
                            [5.190040e-03, 0.000000e00, 6.740000e-05],
                            [-2.863910e-03, 0.000000e00, 3.750000e-06],
                            [6.131800e-04, 0.000000e00, 1.810000e-06],
                            [-6.847200e-04, 0.000000e00, 2.830000e-06],
                            [5.190040e-03, 0.000000e00, -6.740000e-05],
                            [-2.863910e-03, 0.000000e00, -3.750000e-06],
                            [6.131800e-04, 0.000000e00, -1.810000e-06],
                            [-6.847200e-04, 0.000000e00, -2.830000e-06],
                            [-7.019834e-02, 0.000000e00, 0.000000e00],
                            [3.933190e-03, 0.000000e00, 0.000000e00],
                            [-1.576510e-03, 0.000000e00, 0.000000e00],
                            [1.945720e-03, 0.000000e00, 0.000000e00],
                            [-1.576510e-03, 0.000000e00, 0.000000e00],
                            [1.945720e-03, 0.000000e00, 0.000000e00],
                            [-5.327000e-04, 0.000000e00, 0.000000e00],
                            [5.279700e-04, 0.000000e00, 0.000000e00],
                            [-2.433550e-03, 3.229000e-05, 3.229000e-05],
                            [1.558640e-03, -3.540000e-06, -3.540000e-06],
                            [-2.433550e-03, -3.229000e-05, 3.229000e-05],
                            [1.558640e-03, 3.540000e-06, -3.540000e-06],
                            [-2.433550e-03, 3.229000e-05, -3.229000e-05],
                            [1.558640e-03, -3.540000e-06, 3.540000e-06],
                            [-2.433550e-03, -3.229000e-05, -3.229000e-05],
                            [1.558640e-03, 3.540000e-06, 3.540000e-06],
                            [4.099370e-03, 0.000000e00, 6.111210e-03],
                            [4.149230e-03, 0.000000e00, -6.263470e-03],
                            [-4.296000e-05, 0.000000e00, 5.736400e-04],
                            [-5.813000e-05, 0.000000e00, -5.824500e-04],
                            [4.099370e-03, 0.000000e00, -6.111210e-03],
                            [4.149230e-03, 0.000000e00, 6.263470e-03],
                            [-4.296000e-05, 0.000000e00, -5.736400e-04],
                            [-5.813000e-05, 0.000000e00, 5.824500e-04],
                            [4.099370e-03, 6.111210e-03, 0.000000e00],
                            [4.149230e-03, -6.263470e-03, 0.000000e00],
                            [4.099370e-03, -6.111210e-03, 0.000000e00],
                            [4.149230e-03, 6.263470e-03, 0.000000e00],
                            [-4.296000e-05, 5.736400e-04, 0.000000e00],
                            [-5.813000e-05, -5.824500e-04, 0.000000e00],
                            [-4.296000e-05, -5.736400e-04, 0.000000e00],
                            [-5.813000e-05, 5.824500e-04, 0.000000e00],
                        ],
                    ]
                ),
            )
        else:
            raise KeyError(f'Unknown structure_id="{structure_id}"')
        return force_sets

    return _generate_force_sets


@pytest.fixture(scope="session")
def generate_nac_params():
    """Return a `ArrayData` of NAC params of NaCl."""

    def _generate_nac_params(structure_id="NaCl"):
        from aiida.orm import ArrayData

        if structure_id == "NaCl":
            nac_params = ArrayData()
            _I = np.eye(3)
            nac_params.set_array(
                "born_charges", np.array([1.10268732 * _I, -1.10268732 * _I])
            )
            nac_params.set_array("epsilon", np.array(2.48006321 * _I))
        else:
            raise KeyError(f'Unknown structure_id="{structure_id}"')
        return nac_params

    return _generate_nac_params


@pytest.fixture
def generate_fc3_filedata(filepath_tests):
    """Generate a `SinglefileData` instance with fc3.hdf5 file."""

    def _generate_fc3_filedata(structure_id: str = "NaCl"):
        if structure_id == "NaCl":
            filepath = os.path.join(
                filepath_tests,
                "parsers",
                "fixtures",
                "phono3py",
                "default",
                "fc3.hdf5",
            )
        elif structure_id == "NaCl-64":
            filepath = os.path.join(
                filepath_tests,
                "parsers",
                "fixtures",
                "phono3py",
                "ltc-default",
                "fc3.hdf5",
            )
        else:
            raise KeyError(f'Unknown structure_id="{structure_id}"')

        return SinglefileData(filepath)

    return _generate_fc3_filedata


@pytest.fixture
def generate_fc2_filedata(filepath_tests):
    """Generate a `SinglefileData` instance with fc2.hdf5 file."""

    def _generate_fc2_filedata(structure_id: str = "NaCl-64"):
        if structure_id == "NaCl-64":
            filepath = os.path.join(
                filepath_tests,
                "parsers",
                "fixtures",
                "phono3py",
                "default",
                "fc2.hdf5",
            )
        elif structure_id == "NaCl-512":
            filepath = os.path.join(
                filepath_tests,
                "parsers",
                "fixtures",
                "phono3py",
                "ltc-default",
                "fc2.hdf5",
            )
        else:
            raise KeyError(f'Unknown structure_id="{structure_id}"')

        return SinglefileData(filepath)

    return _generate_fc2_filedata


@pytest.fixture
def generate_ltc_filedata(filepath_tests):
    """Generate a `SinglefileData` instance with kappa-xxx.hdf5 file."""

    def _generate_ltc_filedata(structure_id: str = "NaCl-ltc"):
        if structure_id == "NaCl-ltc":
            filepath = os.path.join(
                filepath_tests,
                "parsers",
                "fixtures",
                "phono3py",
                "ltc-default",
                "kappa-m999.hdf5",
            )
        else:
            raise KeyError(f'Unknown structure_id="{structure_id}"')

        return SinglefileData(filepath)

    return _generate_ltc_filedata


@pytest.fixture(scope="session")
def generate_settings():
    """Return a `Dict` of phonopy settings."""

    def _generate_settings(
        supercell_matrix=None,
        phonon_supercell_matrix=None,
        number_of_snapshots=None,
        mesh=None,
        isotope=False,
        lbte=False,
        ts=None,
        grg=False,
    ):
        from aiida.orm import Dict

        settings = {"distance": 0.03}
        if supercell_matrix is None:
            settings["supercell_matrix"] = [1, 1, 1]
        else:
            settings["supercell_matrix"] = supercell_matrix

        if number_of_snapshots is not None:
            settings["number_of_snapshots"] = number_of_snapshots

        if phonon_supercell_matrix is not None:
            settings["phonon_supercell_matrix"] = phonon_supercell_matrix

        if mesh is not None:
            settings["mesh"] = mesh

        if ts is not None:
            settings["ts"] = ts

        if lbte:
            settings["lbte"] = True

        if isotope:
            settings["isotope"] = True

        if grg:
            settings["grg"] = True

        return Dict(dict=settings)

    return _generate_settings


@pytest.fixture(scope="session")
def generate_kpoints_mesh():
    """Return a `KpointsData` node."""

    def _generate_kpoints_mesh(npoints):
        """Return a `KpointsData` with a mesh of npoints in each direction."""
        from aiida.orm import KpointsData

        kpoints = KpointsData()
        kpoints.set_kpoints_mesh([npoints] * 3)

        return kpoints

    return _generate_kpoints_mesh


@pytest.fixture(scope="session")
def generate_parser():
    """Fixture to load a parser class for testing parsers."""

    def _generate_parser(entry_point_name):
        """Fixture to load a parser class for testing parsers.

        :param entry_point_name: entry point name of the parser class
        :return: the `Parser` sub class
        """
        from aiida.plugins import ParserFactory

        return ParserFactory(entry_point_name)

    return _generate_parser


@pytest.fixture
def generate_remote_data():
    """Generate a `RemoteData` node."""

    def _generate_remote_data(computer, remote_path, entry_point_name=None):
        """Generate a `RemoteData` node."""
        from aiida.common.links import LinkType
        from aiida.orm import CalcJobNode, RemoteData
        from aiida.plugins.entry_point import format_entry_point_string

        entry_point = format_entry_point_string("aiida.calculations", entry_point_name)

        remote = RemoteData(remote_path=remote_path)
        remote.computer = computer

        if entry_point_name is not None:
            creator = CalcJobNode(computer=computer, process_type=entry_point)
            creator.set_option(
                "resources", {"num_machines": 1, "num_mpiprocs_per_machine": 1}
            )
            remote.add_incoming(
                creator, link_type=LinkType.CREATE, link_label="remote_folder"
            )
            creator.store()

        return remote

    return _generate_remote_data


@pytest.fixture
def generate_calc_job_node(fixture_localhost):
    """Fixture to generate a mock `CalcJobNode` for testing parsers."""

    def flatten_inputs(inputs, prefix=""):
        """Flatten inputs recursively.

        This works like :meth:`aiida.engine.processes.process::Process._flatten_inputs`.

        Parameters
        ----------
        inputs : dict
            Any optional nodes to add as input links to the corrent CalcJobNode.

        Returns
        -------
        list
            Flattened inputs.

        """
        flat_inputs = []
        for key, value in inputs.items():
            if isinstance(value, Mapping):
                flat_inputs.extend(flatten_inputs(value, prefix=prefix + key + "__"))
            else:
                flat_inputs.append((prefix + key, value))
        return flat_inputs

    def _generate_calc_job_node(
        entry_point_name="phonoxpy.phonopy",
        computer=None,
        test_name=None,
        inputs=None,
        attributes=None,
        retrieve_temporary=None,
    ):
        """Fixture to generate a mock `CalcJobNode` for testing parsers.

        Parameters
        ----------
        entry_point_name : str
            Entry point name of the calculation class
        computer : Computer
        test_name : str
            Relative path of directory with test output files in the
            `fixtures/{entry_point_name}` folder.
        inputs : dict
            Any optional nodes to add as input links to the corrent CalcJobNode.
        attributes : Any optional attributes to set on the node.
        retrieve_temporary : tuple, optional
            An absolute filepath of a temporary directory and a list of filenames that
            should be written to this directory, which will serve as the
            `retrieved_temporary_folder`. For now this only works with top-level files
            and does not support files nested in directories.

        returns
        -------
        CalcJobNode :
            Instance with an attached `FolderData` as the `retrieved` node.

        """
        from aiida.common import LinkType
        from aiida.orm import CalcJobNode, Dict, FolderData, RemoteData
        from aiida.plugins.entry_point import format_entry_point_string

        if computer is None:
            computer = fixture_localhost

        filepath_folder = None
        codename = entry_point_name[len("phonoxpy.") :]

        if test_name is not None:
            basepath = os.path.dirname(os.path.abspath(__file__))
            filename = os.path.join(codename, test_name)
            filepath_folder = os.path.join(basepath, "parsers", "fixtures", filename)
            filepath_input = os.path.join(filepath_folder, f"{codename}_params.yaml.xz")

        entry_point = format_entry_point_string("aiida.calculations", entry_point_name)

        node = CalcJobNode(computer=computer, process_type=entry_point)
        # node.set_attribute("input_filename", "aiida.in")
        node.set_attribute("output_filename", f"{codename}.yaml")
        # node.set_attribute("error_filename", "aiida.err")
        node.set_option("resources", {"num_machines": 1, "num_mpiprocs_per_machine": 1})
        node.set_option("max_wallclock_seconds", 1800)

        if attributes:
            node.set_attribute_many(attributes)

        if filepath_folder:
            from aiida_phonoxpy.utils.utils import phonopy_atoms_to_structure

            if codename == "phonopy":
                from phonopy.interface.phonopy_yaml import PhonopyYaml

                phyml = PhonopyYaml()
            elif codename == "phono3py":
                from phono3py.interface.phono3py_yaml import Phono3pyYaml

                phyml = Phono3pyYaml()
            else:
                raise RuntimeError(f"{codename} is not supported.")
            phyml.read(filepath_input)
            inputs["structure"] = phonopy_atoms_to_structure(phyml.unitcell)
            if "settings" not in inputs:
                settings = {
                    "supercell_matrix": phyml.supercell_matrix,
                    "distance": 0.03,
                }
                inputs["settings"] = Dict(dict=settings)

        if inputs:
            metadata = inputs.pop("metadata", {})
            options = metadata.get("options", {})

            for name, option in options.items():
                node.set_option(name, option)

            for link_label, input_node in flatten_inputs(inputs):
                input_node.store()
                node.add_incoming(
                    input_node, link_type=LinkType.INPUT_CALC, link_label=link_label
                )

        node.store()

        if retrieve_temporary:
            dirpath, filenames = retrieve_temporary
            for filename in filenames:
                try:
                    shutil.copy(
                        os.path.join(filepath_folder, filename),
                        os.path.join(dirpath, filename),
                    )
                # To test the absence of files in the retrieve_temporary folder
                except FileNotFoundError:
                    pass

        if filepath_folder:
            retrieved = FolderData()
            retrieved.put_object_from_tree(filepath_folder)

            # Remove files that are supposed to be only present in the retrieved
            # temporary folder
            if retrieve_temporary:
                for filename in filenames:
                    try:
                        retrieved.delete_object(filename)
                    # To test the absence of files in the retrieve_temporary folder
                    except OSError:
                        pass

            retrieved.add_incoming(
                node, link_type=LinkType.CREATE, link_label="retrieved"
            )
            retrieved.store()

            remote_folder = RemoteData(computer=computer, remote_path="/tmp")
            remote_folder.add_incoming(
                node, link_type=LinkType.CREATE, link_label="remote_folder"
            )
            remote_folder.store()

        return node

    return _generate_calc_job_node


@pytest.fixture
def mock_calculator_code():
    """Return Code instance mock that returns plugin name."""

    def _mock_code(plugin_name):
        class MockCode:
            @staticmethod
            def get_input_plugin_name():
                return plugin_name

        return MockCode()

    return _mock_code


@pytest.fixture
def generate_calc_job():
    """Fixture to construct a new `CalcJob` instance.

    This calls `prepare_for_submission` for testing `CalcJob` classes. The fixture
    will return the `CalcInfo` returned by `prepare_for_submission` and the
    temporary folder that was passed to it, into which the raw input files will
    have been written.

    """

    def _generate_calc_job(folder, entry_point_name, inputs=None):
        """Fixture to generate a mock `CalcInfo` for testing calculation jobs."""
        from aiida.engine.utils import instantiate_process
        from aiida.manage.manager import get_manager
        from aiida.plugins import CalculationFactory

        manager = get_manager()
        runner = manager.get_runner()

        process_class = CalculationFactory(entry_point_name)
        process = instantiate_process(runner, process_class, **inputs)

        calc_info = process.prepare_for_submission(folder)

        return calc_info

    return _generate_calc_job
